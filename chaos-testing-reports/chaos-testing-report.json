{
  "timestamp": "2025-08-26T13:09:16.381Z",
  "platform": "win32",
  "nodeVersion": "v22.18.0",
  "testResults": [
    {
      "scenario": "Database Resilience",
      "description": "Tests database connection failures and recovery",
      "success": true,
      "duration": 1850,
      "exitCode": 0,
      "stdout": "\n> aynamoda@1.0.0 test\n> jest __tests__/chaos-engineering.test.ts --testNamePattern Database Resilience Testing --verbose --detectOpenHandles --forceExit\n\n",
      "stderr": "PASS __tests__/chaos-engineering.test.ts\n  Chaos Engineering Test Suite\n    Database Resilience Testing\n      √ should handle database_connection_failure gracefully (4 ms)\n    API Service Resilience Testing\n      ○ skipped should handle ai_service_timeout with proper fallbacks\n      ○ skipped should handle corrupted_api_response with proper fallbacks\n    Storage Resilience Testing\n      ○ skipped should handle storage_quota_exceeded with storage optimization\n    Memory Pressure Testing\n      ○ skipped should handle memory pressure scenarios\n    Network Instability Testing\n      ○ skipped should handle intermittent network failures with retry logic\n    Cascading Failure Testing\n      ○ skipped should handle multiple simultaneous service failures\n    Data Corruption Resilience\n      ○ skipped should handle corrupted data gracefully\n    Recovery Testing\n      ○ skipped should recover gracefully when services come back online\n\nTest Suites: 1 passed, 1 total\nTests:       8 skipped, 1 passed, 9 total\nSnapshots:   0 total\nTime:        0.974 s, estimated 2 s\nRan all test suites matching /__tests__\\\\chaos-engineering.test.ts/i with tests matching \"Database Resilience Testing\".\n\nJest has detected the following 3 open handles potentially keeping Jest from exiting:\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 244 |\u001b[39m     }\n     \u001b[90m 245 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 246 |\u001b[39m     \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 247 |\u001b[39m       \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mperformCacheCleanup()\u001b[33m;\u001b[39m\n     \u001b[90m 248 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCACHE_CLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 249 |\u001b[39m   }\u001b[0m\n\n      at Function.setInterval [as startCacheCleanup] (src/utils/databaseOptimizations.ts:246:37)\n      at Object.startCacheCleanup (src/utils/databaseOptimizations.ts:238:22)\n      at Object.require (src/services/wardrobeService.ts:5:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 56 |\u001b[39m     }\n     \u001b[90m 57 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 58 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalysisTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 59 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalyzePerformance()\u001b[33m;\u001b[39m\n     \u001b[90m 60 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mANALYSIS_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 61 |\u001b[39m   }\u001b[0m\n\n      at DatabasePerformanceService.setInterval [as startPerformanceAnalysis] (src/services/databasePerformanceService.ts:58:26)\n      at new startPerformanceAnalysis (src/services/databasePerformanceService.ts:49:10)\n      at Object.<anonymous> (src/services/databasePerformanceService.ts:365:43)\n      at Object.require (src/services/wardrobeService.ts:10:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 69 |\u001b[39m     }\n     \u001b[90m 70 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 71 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 72 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupExpiredCache()\u001b[33m;\u001b[39m\n     \u001b[90m 73 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 74 |\u001b[39m   }\u001b[0m\n\n      at WardrobeService.setInterval [as startCleanupTimer] (src/services/wardrobeService.ts:71:25)\n      at new startCleanupTimer (src/services/wardrobeService.ts:62:10)\n      at Object.<anonymous> (src/services/wardrobeService.ts:571:32)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n",
      "timestamp": "2025-08-26T13:09:05.568Z"
    },
    {
      "scenario": "API Service Resilience",
      "description": "Tests API timeouts and fallback mechanisms",
      "success": true,
      "duration": 1488,
      "exitCode": 0,
      "stdout": "\n> aynamoda@1.0.0 test\n> jest __tests__/chaos-engineering.test.ts --testNamePattern API Service Resilience Testing --verbose --detectOpenHandles --forceExit\n\n",
      "stderr": "PASS __tests__/chaos-engineering.test.ts\n  Chaos Engineering Test Suite\n    Database Resilience Testing\n      ○ skipped should handle database_connection_failure gracefully\n    API Service Resilience Testing\n      √ should handle ai_service_timeout with proper fallbacks (5 ms)\n      √ should handle corrupted_api_response with proper fallbacks (2 ms)\n    Storage Resilience Testing\n      ○ skipped should handle storage_quota_exceeded with storage optimization\n    Memory Pressure Testing\n      ○ skipped should handle memory pressure scenarios\n    Network Instability Testing\n      ○ skipped should handle intermittent network failures with retry logic\n    Cascading Failure Testing\n      ○ skipped should handle multiple simultaneous service failures\n    Data Corruption Resilience\n      ○ skipped should handle corrupted data gracefully\n    Recovery Testing\n      ○ skipped should recover gracefully when services come back online\n\nTest Suites: 1 passed, 1 total\nTests:       7 skipped, 2 passed, 9 total\nSnapshots:   0 total\nTime:        0.578 s, estimated 1 s\nRan all test suites matching /__tests__\\\\chaos-engineering.test.ts/i with tests matching \"API Service Resilience Testing\".\n\nJest has detected the following 3 open handles potentially keeping Jest from exiting:\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 244 |\u001b[39m     }\n     \u001b[90m 245 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 246 |\u001b[39m     \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 247 |\u001b[39m       \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mperformCacheCleanup()\u001b[33m;\u001b[39m\n     \u001b[90m 248 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCACHE_CLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 249 |\u001b[39m   }\u001b[0m\n\n      at Function.setInterval [as startCacheCleanup] (src/utils/databaseOptimizations.ts:246:37)\n      at Object.startCacheCleanup (src/utils/databaseOptimizations.ts:238:22)\n      at Object.require (src/services/wardrobeService.ts:5:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 56 |\u001b[39m     }\n     \u001b[90m 57 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 58 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalysisTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 59 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalyzePerformance()\u001b[33m;\u001b[39m\n     \u001b[90m 60 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mANALYSIS_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 61 |\u001b[39m   }\u001b[0m\n\n      at DatabasePerformanceService.setInterval [as startPerformanceAnalysis] (src/services/databasePerformanceService.ts:58:26)\n      at new startPerformanceAnalysis (src/services/databasePerformanceService.ts:49:10)\n      at Object.<anonymous> (src/services/databasePerformanceService.ts:365:43)\n      at Object.require (src/services/wardrobeService.ts:10:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 69 |\u001b[39m     }\n     \u001b[90m 70 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 71 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 72 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupExpiredCache()\u001b[33m;\u001b[39m\n     \u001b[90m 73 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 74 |\u001b[39m   }\u001b[0m\n\n      at WardrobeService.setInterval [as startCleanupTimer] (src/services/wardrobeService.ts:71:25)\n      at new startCleanupTimer (src/services/wardrobeService.ts:62:10)\n      at Object.<anonymous> (src/services/wardrobeService.ts:571:32)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n",
      "timestamp": "2025-08-26T13:09:07.057Z"
    },
    {
      "scenario": "Storage Resilience",
      "description": "Tests storage quota and access issues",
      "success": true,
      "duration": 1395,
      "exitCode": 0,
      "stdout": "\n> aynamoda@1.0.0 test\n> jest __tests__/chaos-engineering.test.ts --testNamePattern Storage Resilience Testing --verbose --detectOpenHandles --forceExit\n\n",
      "stderr": "PASS __tests__/chaos-engineering.test.ts\n  Chaos Engineering Test Suite\n    Database Resilience Testing\n      ○ skipped should handle database_connection_failure gracefully\n    API Service Resilience Testing\n      ○ skipped should handle ai_service_timeout with proper fallbacks\n      ○ skipped should handle corrupted_api_response with proper fallbacks\n    Storage Resilience Testing\n      √ should handle storage_quota_exceeded with storage optimization (4 ms)\n    Memory Pressure Testing\n      ○ skipped should handle memory pressure scenarios\n    Network Instability Testing\n      ○ skipped should handle intermittent network failures with retry logic\n    Cascading Failure Testing\n      ○ skipped should handle multiple simultaneous service failures\n    Data Corruption Resilience\n      ○ skipped should handle corrupted data gracefully\n    Recovery Testing\n      ○ skipped should recover gracefully when services come back online\n\nTest Suites: 1 passed, 1 total\nTests:       8 skipped, 1 passed, 9 total\nSnapshots:   0 total\nTime:        0.553 s, estimated 1 s\nRan all test suites matching /__tests__\\\\chaos-engineering.test.ts/i with tests matching \"Storage Resilience Testing\".\n\nJest has detected the following 3 open handles potentially keeping Jest from exiting:\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 244 |\u001b[39m     }\n     \u001b[90m 245 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 246 |\u001b[39m     \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 247 |\u001b[39m       \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mperformCacheCleanup()\u001b[33m;\u001b[39m\n     \u001b[90m 248 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCACHE_CLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 249 |\u001b[39m   }\u001b[0m\n\n      at Function.setInterval [as startCacheCleanup] (src/utils/databaseOptimizations.ts:246:37)\n      at Object.startCacheCleanup (src/utils/databaseOptimizations.ts:238:22)\n      at Object.require (src/services/wardrobeService.ts:5:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 56 |\u001b[39m     }\n     \u001b[90m 57 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 58 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalysisTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 59 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalyzePerformance()\u001b[33m;\u001b[39m\n     \u001b[90m 60 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mANALYSIS_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 61 |\u001b[39m   }\u001b[0m\n\n      at DatabasePerformanceService.setInterval [as startPerformanceAnalysis] (src/services/databasePerformanceService.ts:58:26)\n      at new startPerformanceAnalysis (src/services/databasePerformanceService.ts:49:10)\n      at Object.<anonymous> (src/services/databasePerformanceService.ts:365:43)\n      at Object.require (src/services/wardrobeService.ts:10:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 69 |\u001b[39m     }\n     \u001b[90m 70 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 71 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 72 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupExpiredCache()\u001b[33m;\u001b[39m\n     \u001b[90m 73 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 74 |\u001b[39m   }\u001b[0m\n\n      at WardrobeService.setInterval [as startCleanupTimer] (src/services/wardrobeService.ts:71:25)\n      at new startCleanupTimer (src/services/wardrobeService.ts:62:10)\n      at Object.<anonymous> (src/services/wardrobeService.ts:571:32)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n",
      "timestamp": "2025-08-26T13:09:08.452Z"
    },
    {
      "scenario": "Memory Pressure",
      "description": "Tests application behavior under memory constraints",
      "success": true,
      "duration": 1422,
      "exitCode": 0,
      "stdout": "\n> aynamoda@1.0.0 test\n> jest __tests__/chaos-engineering.test.ts --testNamePattern Memory Pressure Testing --verbose --detectOpenHandles --forceExit\n\n",
      "stderr": "PASS __tests__/chaos-engineering.test.ts\n  Chaos Engineering Test Suite\n    Database Resilience Testing\n      ○ skipped should handle database_connection_failure gracefully\n    API Service Resilience Testing\n      ○ skipped should handle ai_service_timeout with proper fallbacks\n      ○ skipped should handle corrupted_api_response with proper fallbacks\n    Storage Resilience Testing\n      ○ skipped should handle storage_quota_exceeded with storage optimization\n    Memory Pressure Testing\n      √ should handle memory pressure scenarios (8 ms)\n    Network Instability Testing\n      ○ skipped should handle intermittent network failures with retry logic\n    Cascading Failure Testing\n      ○ skipped should handle multiple simultaneous service failures\n    Data Corruption Resilience\n      ○ skipped should handle corrupted data gracefully\n    Recovery Testing\n      ○ skipped should recover gracefully when services come back online\n\nTest Suites: 1 passed, 1 total\nTests:       8 skipped, 1 passed, 9 total\nSnapshots:   0 total\nTime:        0.555 s, estimated 1 s\nRan all test suites matching /__tests__\\\\chaos-engineering.test.ts/i with tests matching \"Memory Pressure Testing\".\n\nJest has detected the following 3 open handles potentially keeping Jest from exiting:\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 244 |\u001b[39m     }\n     \u001b[90m 245 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 246 |\u001b[39m     \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 247 |\u001b[39m       \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mperformCacheCleanup()\u001b[33m;\u001b[39m\n     \u001b[90m 248 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCACHE_CLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 249 |\u001b[39m   }\u001b[0m\n\n      at Function.setInterval [as startCacheCleanup] (src/utils/databaseOptimizations.ts:246:37)\n      at Object.startCacheCleanup (src/utils/databaseOptimizations.ts:238:22)\n      at Object.require (src/services/wardrobeService.ts:5:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 56 |\u001b[39m     }\n     \u001b[90m 57 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 58 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalysisTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 59 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalyzePerformance()\u001b[33m;\u001b[39m\n     \u001b[90m 60 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mANALYSIS_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 61 |\u001b[39m   }\u001b[0m\n\n      at DatabasePerformanceService.setInterval [as startPerformanceAnalysis] (src/services/databasePerformanceService.ts:58:26)\n      at new startPerformanceAnalysis (src/services/databasePerformanceService.ts:49:10)\n      at Object.<anonymous> (src/services/databasePerformanceService.ts:365:43)\n      at Object.require (src/services/wardrobeService.ts:10:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 69 |\u001b[39m     }\n     \u001b[90m 70 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 71 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 72 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupExpiredCache()\u001b[33m;\u001b[39m\n     \u001b[90m 73 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 74 |\u001b[39m   }\u001b[0m\n\n      at WardrobeService.setInterval [as startCleanupTimer] (src/services/wardrobeService.ts:71:25)\n      at new startCleanupTimer (src/services/wardrobeService.ts:62:10)\n      at Object.<anonymous> (src/services/wardrobeService.ts:571:32)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n",
      "timestamp": "2025-08-26T13:09:09.874Z"
    },
    {
      "scenario": "Network Instability",
      "description": "Tests intermittent network failures and retry logic",
      "success": true,
      "duration": 2041,
      "exitCode": 0,
      "stdout": "\n> aynamoda@1.0.0 test\n> jest __tests__/chaos-engineering.test.ts --testNamePattern Network Instability Testing --verbose --detectOpenHandles --forceExit\n\n",
      "stderr": "PASS __tests__/chaos-engineering.test.ts\n  Chaos Engineering Test Suite\n    Database Resilience Testing\n      ○ skipped should handle database_connection_failure gracefully\n    API Service Resilience Testing\n      ○ skipped should handle ai_service_timeout with proper fallbacks\n      ○ skipped should handle corrupted_api_response with proper fallbacks\n    Storage Resilience Testing\n      ○ skipped should handle storage_quota_exceeded with storage optimization\n    Memory Pressure Testing\n      ○ skipped should handle memory pressure scenarios\n    Network Instability Testing\n      √ should handle intermittent network failures with retry logic (626 ms)\n    Cascading Failure Testing\n      ○ skipped should handle multiple simultaneous service failures\n    Data Corruption Resilience\n      ○ skipped should handle corrupted data gracefully\n    Recovery Testing\n      ○ skipped should recover gracefully when services come back online\n\nTest Suites: 1 passed, 1 total\nTests:       8 skipped, 1 passed, 9 total\nSnapshots:   0 total\nTime:        1.186 s\nRan all test suites matching /__tests__\\\\chaos-engineering.test.ts/i with tests matching \"Network Instability Testing\".\n\nJest has detected the following 3 open handles potentially keeping Jest from exiting:\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 244 |\u001b[39m     }\n     \u001b[90m 245 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 246 |\u001b[39m     \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 247 |\u001b[39m       \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mperformCacheCleanup()\u001b[33m;\u001b[39m\n     \u001b[90m 248 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCACHE_CLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 249 |\u001b[39m   }\u001b[0m\n\n      at Function.setInterval [as startCacheCleanup] (src/utils/databaseOptimizations.ts:246:37)\n      at Object.startCacheCleanup (src/utils/databaseOptimizations.ts:238:22)\n      at Object.require (src/services/wardrobeService.ts:5:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 56 |\u001b[39m     }\n     \u001b[90m 57 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 58 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalysisTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 59 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalyzePerformance()\u001b[33m;\u001b[39m\n     \u001b[90m 60 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mANALYSIS_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 61 |\u001b[39m   }\u001b[0m\n\n      at DatabasePerformanceService.setInterval [as startPerformanceAnalysis] (src/services/databasePerformanceService.ts:58:26)\n      at new startPerformanceAnalysis (src/services/databasePerformanceService.ts:49:10)\n      at Object.<anonymous> (src/services/databasePerformanceService.ts:365:43)\n      at Object.require (src/services/wardrobeService.ts:10:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 69 |\u001b[39m     }\n     \u001b[90m 70 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 71 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 72 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupExpiredCache()\u001b[33m;\u001b[39m\n     \u001b[90m 73 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 74 |\u001b[39m   }\u001b[0m\n\n      at WardrobeService.setInterval [as startCleanupTimer] (src/services/wardrobeService.ts:71:25)\n      at new startCleanupTimer (src/services/wardrobeService.ts:62:10)\n      at Object.<anonymous> (src/services/wardrobeService.ts:571:32)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n",
      "timestamp": "2025-08-26T13:09:11.915Z"
    },
    {
      "scenario": "Cascading Failures",
      "description": "Tests multiple simultaneous service failures",
      "success": true,
      "duration": 1406,
      "exitCode": 0,
      "stdout": "\n> aynamoda@1.0.0 test\n> jest __tests__/chaos-engineering.test.ts --testNamePattern Cascading Failure Testing --verbose --detectOpenHandles --forceExit\n\n",
      "stderr": "PASS __tests__/chaos-engineering.test.ts\n  Chaos Engineering Test Suite\n    Database Resilience Testing\n      ○ skipped should handle database_connection_failure gracefully\n    API Service Resilience Testing\n      ○ skipped should handle ai_service_timeout with proper fallbacks\n      ○ skipped should handle corrupted_api_response with proper fallbacks\n    Storage Resilience Testing\n      ○ skipped should handle storage_quota_exceeded with storage optimization\n    Memory Pressure Testing\n      ○ skipped should handle memory pressure scenarios\n    Network Instability Testing\n      ○ skipped should handle intermittent network failures with retry logic\n    Cascading Failure Testing\n      √ should handle multiple simultaneous service failures (4 ms)\n    Data Corruption Resilience\n      ○ skipped should handle corrupted data gracefully\n    Recovery Testing\n      ○ skipped should recover gracefully when services come back online\n\nTest Suites: 1 passed, 1 total\nTests:       8 skipped, 1 passed, 9 total\nSnapshots:   0 total\nTime:        0.551 s, estimated 2 s\nRan all test suites matching /__tests__\\\\chaos-engineering.test.ts/i with tests matching \"Cascading Failure Testing\".\n\nJest has detected the following 3 open handles potentially keeping Jest from exiting:\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 244 |\u001b[39m     }\n     \u001b[90m 245 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 246 |\u001b[39m     \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 247 |\u001b[39m       \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mperformCacheCleanup()\u001b[33m;\u001b[39m\n     \u001b[90m 248 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCACHE_CLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 249 |\u001b[39m   }\u001b[0m\n\n      at Function.setInterval [as startCacheCleanup] (src/utils/databaseOptimizations.ts:246:37)\n      at Object.startCacheCleanup (src/utils/databaseOptimizations.ts:238:22)\n      at Object.require (src/services/wardrobeService.ts:5:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 56 |\u001b[39m     }\n     \u001b[90m 57 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 58 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalysisTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 59 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalyzePerformance()\u001b[33m;\u001b[39m\n     \u001b[90m 60 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mANALYSIS_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 61 |\u001b[39m   }\u001b[0m\n\n      at DatabasePerformanceService.setInterval [as startPerformanceAnalysis] (src/services/databasePerformanceService.ts:58:26)\n      at new startPerformanceAnalysis (src/services/databasePerformanceService.ts:49:10)\n      at Object.<anonymous> (src/services/databasePerformanceService.ts:365:43)\n      at Object.require (src/services/wardrobeService.ts:10:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 69 |\u001b[39m     }\n     \u001b[90m 70 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 71 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 72 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupExpiredCache()\u001b[33m;\u001b[39m\n     \u001b[90m 73 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 74 |\u001b[39m   }\u001b[0m\n\n      at WardrobeService.setInterval [as startCleanupTimer] (src/services/wardrobeService.ts:71:25)\n      at new startCleanupTimer (src/services/wardrobeService.ts:62:10)\n      at Object.<anonymous> (src/services/wardrobeService.ts:571:32)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n",
      "timestamp": "2025-08-26T13:09:13.322Z"
    },
    {
      "scenario": "Data Corruption",
      "description": "Tests handling of corrupted or malformed data",
      "success": true,
      "duration": 1420,
      "exitCode": 0,
      "stdout": "\n> aynamoda@1.0.0 test\n> jest __tests__/chaos-engineering.test.ts --testNamePattern Data Corruption Resilience --verbose --detectOpenHandles --forceExit\n\n",
      "stderr": "PASS __tests__/chaos-engineering.test.ts\n  Chaos Engineering Test Suite\n    Database Resilience Testing\n      ○ skipped should handle database_connection_failure gracefully\n    API Service Resilience Testing\n      ○ skipped should handle ai_service_timeout with proper fallbacks\n      ○ skipped should handle corrupted_api_response with proper fallbacks\n    Storage Resilience Testing\n      ○ skipped should handle storage_quota_exceeded with storage optimization\n    Memory Pressure Testing\n      ○ skipped should handle memory pressure scenarios\n    Network Instability Testing\n      ○ skipped should handle intermittent network failures with retry logic\n    Cascading Failure Testing\n      ○ skipped should handle multiple simultaneous service failures\n    Data Corruption Resilience\n      √ should handle corrupted data gracefully (5 ms)\n    Recovery Testing\n      ○ skipped should recover gracefully when services come back online\n\nTest Suites: 1 passed, 1 total\nTests:       8 skipped, 1 passed, 9 total\nSnapshots:   0 total\nTime:        0.554 s, estimated 1 s\nRan all test suites matching /__tests__\\\\chaos-engineering.test.ts/i with tests matching \"Data Corruption Resilience\".\n\nJest has detected the following 3 open handles potentially keeping Jest from exiting:\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 244 |\u001b[39m     }\n     \u001b[90m 245 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 246 |\u001b[39m     \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 247 |\u001b[39m       \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mperformCacheCleanup()\u001b[33m;\u001b[39m\n     \u001b[90m 248 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCACHE_CLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 249 |\u001b[39m   }\u001b[0m\n\n      at Function.setInterval [as startCacheCleanup] (src/utils/databaseOptimizations.ts:246:37)\n      at Object.startCacheCleanup (src/utils/databaseOptimizations.ts:238:22)\n      at Object.require (src/services/wardrobeService.ts:5:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 56 |\u001b[39m     }\n     \u001b[90m 57 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 58 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalysisTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 59 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalyzePerformance()\u001b[33m;\u001b[39m\n     \u001b[90m 60 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mANALYSIS_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 61 |\u001b[39m   }\u001b[0m\n\n      at DatabasePerformanceService.setInterval [as startPerformanceAnalysis] (src/services/databasePerformanceService.ts:58:26)\n      at new startPerformanceAnalysis (src/services/databasePerformanceService.ts:49:10)\n      at Object.<anonymous> (src/services/databasePerformanceService.ts:365:43)\n      at Object.require (src/services/wardrobeService.ts:10:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 69 |\u001b[39m     }\n     \u001b[90m 70 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 71 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 72 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupExpiredCache()\u001b[33m;\u001b[39m\n     \u001b[90m 73 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 74 |\u001b[39m   }\u001b[0m\n\n      at WardrobeService.setInterval [as startCleanupTimer] (src/services/wardrobeService.ts:71:25)\n      at new startCleanupTimer (src/services/wardrobeService.ts:62:10)\n      at Object.<anonymous> (src/services/wardrobeService.ts:571:32)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n",
      "timestamp": "2025-08-26T13:09:14.742Z"
    },
    {
      "scenario": "Recovery Testing",
      "description": "Tests service recovery and restoration",
      "success": true,
      "duration": 1638,
      "exitCode": 0,
      "stdout": "\n> aynamoda@1.0.0 test\n> jest __tests__/chaos-engineering.test.ts --testNamePattern Recovery Testing --verbose --detectOpenHandles --forceExit\n\n",
      "stderr": "PASS __tests__/chaos-engineering.test.ts\n  Chaos Engineering Test Suite\n    Database Resilience Testing\n      ○ skipped should handle database_connection_failure gracefully\n    API Service Resilience Testing\n      ○ skipped should handle ai_service_timeout with proper fallbacks\n      ○ skipped should handle corrupted_api_response with proper fallbacks\n    Storage Resilience Testing\n      ○ skipped should handle storage_quota_exceeded with storage optimization\n    Memory Pressure Testing\n      ○ skipped should handle memory pressure scenarios\n    Network Instability Testing\n      ○ skipped should handle intermittent network failures with retry logic\n    Cascading Failure Testing\n      ○ skipped should handle multiple simultaneous service failures\n    Data Corruption Resilience\n      ○ skipped should handle corrupted data gracefully\n    Recovery Testing\n      √ should recover gracefully when services come back online (223 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       8 skipped, 1 passed, 9 total\nSnapshots:   0 total\nTime:        0.78 s, estimated 1 s\nRan all test suites matching /__tests__\\\\chaos-engineering.test.ts/i with tests matching \"Recovery Testing\".\n\nJest has detected the following 3 open handles potentially keeping Jest from exiting:\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 244 |\u001b[39m     }\n     \u001b[90m 245 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 246 |\u001b[39m     \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m     |\u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 247 |\u001b[39m       \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39mperformCacheCleanup()\u001b[33m;\u001b[39m\n     \u001b[90m 248 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[33mOptimizedQueries\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCACHE_CLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 249 |\u001b[39m   }\u001b[0m\n\n      at Function.setInterval [as startCacheCleanup] (src/utils/databaseOptimizations.ts:246:37)\n      at Object.startCacheCleanup (src/utils/databaseOptimizations.ts:238:22)\n      at Object.require (src/services/wardrobeService.ts:5:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 56 |\u001b[39m     }\n     \u001b[90m 57 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 58 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalysisTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 59 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39manalyzePerformance()\u001b[33m;\u001b[39m\n     \u001b[90m 60 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mANALYSIS_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 61 |\u001b[39m   }\u001b[0m\n\n      at DatabasePerformanceService.setInterval [as startPerformanceAnalysis] (src/services/databasePerformanceService.ts:58:26)\n      at new startPerformanceAnalysis (src/services/databasePerformanceService.ts:49:10)\n      at Object.<anonymous> (src/services/databasePerformanceService.ts:365:43)\n      at Object.require (src/services/wardrobeService.ts:10:1)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n\n  ●  Timeout\n\n    \u001b[0m \u001b[90m 69 |\u001b[39m     }\n     \u001b[90m 70 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 71 |\u001b[39m     \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupTimer \u001b[33m=\u001b[39m setInterval(() \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 72 |\u001b[39m       \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mcleanupExpiredCache()\u001b[33m;\u001b[39m\n     \u001b[90m 73 |\u001b[39m     }\u001b[33m,\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCLEANUP_INTERVAL\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 74 |\u001b[39m   }\u001b[0m\n\n      at WardrobeService.setInterval [as startCleanupTimer] (src/services/wardrobeService.ts:71:25)\n      at new startCleanupTimer (src/services/wardrobeService.ts:62:10)\n      at Object.<anonymous> (src/services/wardrobeService.ts:571:32)\n      at Object.require (__tests__/chaos-engineering.test.ts:17:1)\n\n",
      "timestamp": "2025-08-26T13:09:16.380Z"
    }
  ],
  "analysis": {
    "overallSuccess": true,
    "successRate": 100,
    "totalDuration": 12660,
    "averageDuration": 1582.5,
    "criticalFailures": [],
    "recommendations": [],
    "resilienceScore": 100
  },
  "summary": {
    "totalScenarios": 8,
    "successfulScenarios": 8,
    "failedScenarios": 0,
    "totalDuration": 12660,
    "resilienceScore": 100
  }
}
