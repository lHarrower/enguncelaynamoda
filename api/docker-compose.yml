version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aynamoda-postgres
    environment:
      POSTGRES_DB: aynamoda
      POSTGRES_USER: aynamoda
      POSTGRES_PASSWORD: aynamoda123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aynamoda-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aynamoda -d aynamoda"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aynamoda-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aynamoda-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aynamoda-api
    ports:
      - "8080:8080"
    environment:
      - ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=aynamoda
      - DB_PASSWORD=aynamoda123
      - DB_NAME=aynamoda
      - DB_SSL_MODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-in-production
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:19006
      - RATE_LIMIT_REQUESTS_PER_MINUTE=100
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aynamoda-network
    volumes:
      - ./uploads:/app/uploads
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  aynamoda-network:
    driver: bridge