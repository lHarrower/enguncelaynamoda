/**
 * User Experience Tests for Confidence Note Quality
 * Tests the quality, tone, and effectiveness of confidence notes
 */

// Mock external dependencies first
jest.mock('@/config/supabaseClient', () => ({
  supabase: {
    from: jest.fn(),
    auth: {
      getUser: jest.fn(),
    },
  },
}));

import { aynaMirrorService } from '@/services/aynaMirrorService';
import { intelligenceService } from '@/services/intelligenceService';
import { supabase } from '@/config/supabaseClient';

describe('Confidence Note Quality - User Experience Tests', () => {
  const mockUserId = 'ux-test-user';

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Confidence Note Content Quality', () => {
    it('should generate personalized confidence notes based on user history', async () => {
      const mockOutfit = {
        id: 'outfit-123',
        items: [
          { id: 'item-1', category: 'tops', colors: ['blue'], brand: 'Zara' },
          { id: 'item-2', category: 'bottoms', colors: ['black'], brand: 'Uniqlo' },
        ],
        confidenceScore: 4.5,
      };

      const mockUserHistory = {
        userId: mockUserId,
        previousFeedback: [
          {
            outfitId: 'previous-outfit',
            confidenceRating: 5,
            emotionalResponse: {
              primary: 'confident',
              intensity: 9,
              additionalEmotions: [],
              timestamp: new Date(),
            },
            socialFeedback: { complimentsReceived: 3 },
          },
        ],
        stylePreferences: {
          preferredColors: ['blue', 'black'],
          confidenceNoteStyle: 'encouraging',
        },
      };

      // Mock database responses
      (supabase.from as jest.Mock).mockReturnValue({
        select: jest.fn().mockReturnValue({
          eq: jest.fn().mockReturnValue({
            data: mockUserHistory.previousFeedback,
            error: null,
          }),
        }),
      });

      const confidenceNote = await aynaMirrorService.generateConfidenceNote(
        mockOutfit as any,
        mockUserHistory as any,
      );

      // Quality checks
      expect(confidenceNote).toBeTruthy();
      expect(confidenceNote.length).toBeGreaterThan(30); // Substantial content
      expect(confidenceNote.length).toBeLessThan(200); // Not overwhelming

      // Personalization checks
      expect(confidenceNote.toLowerCase()).toMatch(/(you|your)/); // Personal pronouns
      expect(confidenceNote).toMatch(/[.!]/); // Proper punctuation

      // Tone checks for encouraging style
      const encouragingWords = [
        'confident',
        'amazing',
        'perfect',
        'great',
        'beautiful',
        'stunning',
        'ready',
      ];
      const hasEncouragingTone = encouragingWords.some((word) =>
        confidenceNote.toLowerCase().includes(word),
      );
      expect(hasEncouragingTone).toBe(true);
    });

    it('should reference previous positive experiences when available', async () => {
      const mockOutfit = {
        id: 'outfit-456',
        items: [{ id: 'item-3', category: 'dress', colors: ['red'], tags: ['formal'] }],
        confidenceScore: 4.8,
      };

      const mockUserHistory = {
        userId: mockUserId,
        previousFeedback: [
          {
            outfitId: 'similar-outfit',
            items: [{ id: 'item-3', category: 'dress', colors: ['red'] }],
            confidenceRating: 5,
            socialFeedback: { complimentsReceived: 4, positiveReactions: 8 },
            occasion: 'dinner date',
          },
        ],
      };

      (supabase.from as jest.Mock).mockReturnValue({
        select: jest.fn().mockReturnValue({
          eq: jest.fn().mockReturnValue({
            data: mockUserHistory.previousFeedback,
            error: null,
          }),
        }),
      });

      const confidenceNote = await aynaMirrorService.generateConfidenceNote(
        mockOutfit as any,
        mockUserHistory as any,
      );

      // Should reference previous success
      const referencesHistory =
        confidenceNote.toLowerCase().includes('last time') ||
        confidenceNote.toLowerCase().includes('before') ||
        confidenceNote.toLowerCase().includes('compliment') ||
        confidenceNote.toLowerCase().includes('loved');

      expect(referencesHistory).toBe(true);
    });

    it('should encourage rediscovery of neglected items', async () => {
      const mockOutfit = {
        id: 'outfit-789',
        items: [
          {
            id: 'item-4',
            category: 'jacket',
            colors: ['brown'],
            usageStats: {
              lastWorn: new Date('2023-10-01'), // 3+ months ago
              totalWears: 2,
            },
          },
        ],
        confidenceScore: 4.2,
      };

      const confidenceNote = await aynaMirrorService.generateConfidenceNote(
        mockOutfit as any,
        { userId: mockUserId } as any,
      );

      // Should encourage rediscovery
      const rediscoveryWords = [
        'forgotten',
        'neglected',
        'rediscover',
        'time to',
        'bring back',
        'dust off',
      ];
      const hasRediscoveryTheme = rediscoveryWords.some((word) =>
        confidenceNote.toLowerCase().includes(word),
      );

      expect(hasRediscoveryTheme).toBe(true);
    });

    it('should adapt tone based on user preference settings', async () => {
      const mockOutfit = {
        id: 'outfit-tone-test',
        items: [{ id: 'item-5', category: 'tops', colors: ['white'] }],
        confidenceScore: 4.0,
      };

      const toneStyles = ['encouraging', 'witty', 'poetic'] as const;

      for (const style of toneStyles) {
        const mockUserHistory = {
          userId: mockUserId,
          stylePreferences: { confidenceNoteStyle: style },
        };

        const confidenceNote = await aynaMirrorService.generateConfidenceNote(
          mockOutfit as any,
          mockUserHistory as any,
        );

        expect(confidenceNote).toBeTruthy();

        // Verify tone characteristics
        switch (style) {
          case 'encouraging':
            expect(confidenceNote.toLowerCase()).toMatch(/(you|amazing|confident|ready|perfect)/);
            break;
          case 'witty':
            expect(confidenceNote).toMatch(/[!?]/); // Likely to have exclamation or question marks
            break;
          case 'poetic':
            expect(confidenceNote.length).toBeGreaterThan(40); // Poetic tends to be longer
            break;
        }
      }
    });
  });

  describe('Confidence Note Accessibility', () => {
    it('should generate screen-reader friendly confidence notes', async () => {
      const mockOutfit = {
        id: 'accessibility-test',
        items: [{ id: 'item-6', category: 'shirt', colors: ['navy'], brand: 'J.Crew' }],
        confidenceScore: 4.3,
      };

      const confidenceNote = await aynaMirrorService.generateConfidenceNote(
        mockOutfit as any,
        { userId: mockUserId } as any,
      );

      // Accessibility checks
      expect(confidenceNote).not.toMatch(/[^\w\s.,!?'-]/); // No special characters
      expect(confidenceNote).not.toMatch(/\b[A-Z]{2,}\b/); // No all-caps words (except abbreviations)
      expect(confidenceNote.split('.').length).toBeLessThan(4); // Not too many sentences

      // Should be pronounceable
      expect(confidenceNote).not.toMatch(/\d+/); // No numbers that might confuse screen readers
      expect(confidenceNote).not.toMatch(/&/); // No ampersands
    });

    it('should provide meaningful descriptions for color combinations', async () => {
      const mockOutfit = {
        id: 'color-description-test',
        items: [
          { id: 'item-7', category: 'top', colors: ['emerald', 'gold'] },
          { id: 'item-8', category: 'bottom', colors: ['charcoal'] },
        ],
        confidenceScore: 4.6,
      };

      const confidenceNote = await aynaMirrorService.generateConfidenceNote(
        mockOutfit as any,
        { userId: mockUserId } as any,
      );

      // Should describe the visual appeal in accessible terms
      const colorDescriptors = [
        'rich',
        'vibrant',
        'elegant',
        'sophisticated',
        'striking',
        'beautiful',
      ];
      const hasColorDescription = colorDescriptors.some((descriptor) =>
        confidenceNote.toLowerCase().includes(descriptor),
      );

      expect(hasColorDescription).toBe(true);
    });
  });

  describe('Confidence Note Effectiveness', () => {
    it('should correlate confidence note quality with user satisfaction', async () => {
      // Test different confidence note approaches
      const testScenarios = [
        {
          outfit: { id: 'test-1', items: [{ category: 'dress' }], confidenceScore: 3.5 },
          expectedSatisfaction: 'moderate',
        },
        {
          outfit: { id: 'test-2', items: [{ category: 'suit' }], confidenceScore: 4.8 },
          expectedSatisfaction: 'high',
        },
      ];

      for (const scenario of testScenarios) {
        const confidenceNote = await aynaMirrorService.generateConfidenceNote(
          scenario.outfit as any,
          { userId: mockUserId } as any,
        );

        // Higher confidence scores should generate more enthusiastic notes
        if (scenario.expectedSatisfaction === 'high') {
          const enthusiasticWords = ['amazing', 'stunning', 'perfect', 'incredible', 'fantastic'];
          const hasEnthusiasm = enthusiasticWords.some((word) =>
            confidenceNote.toLowerCase().includes(word),
          );
          expect(hasEnthusiasm).toBe(true);
        }

        // All notes should be positive and supportive
        const negativeWords = ['bad', 'wrong', 'ugly', 'terrible', 'awful'];
        const hasNegativeWords = negativeWords.some((word) =>
          confidenceNote.toLowerCase().includes(word),
        );
        expect(hasNegativeWords).toBe(false);
      }
    });

    it('should maintain consistency in voice and brand personality', async () => {
      const testOutfits = Array.from({ length: 5 }, (_, i) => ({
        id: `consistency-test-${i}`,
        items: [{ id: `item-${i}`, category: 'tops' }],
        confidenceScore: 4.0 + i * 0.1,
      }));

      const confidenceNotes = await Promise.all(
        testOutfits.map((outfit) =>
          aynaMirrorService.generateConfidenceNote(outfit as any, { userId: mockUserId } as any),
        ),
      );

      // All notes should maintain consistent brand voice
      confidenceNotes.forEach((note) => {
        expect(note).toBeTruthy();
        expect(note.length).toBeGreaterThan(20);

        // Should be supportive and personal
        expect(note.toLowerCase()).toMatch(/(you|your)/);

        // Should avoid overly casual or unprofessional language
        expect(note.toLowerCase()).not.toMatch(/(omg|lol|wtf|damn)/);
      });

      // Notes should vary in content but maintain consistent tone
      const uniqueNotes = new Set(confidenceNotes);
      expect(uniqueNotes.size).toBe(confidenceNotes.length); // All should be unique
    });
  });

  describe('Cultural Sensitivity and Inclusivity', () => {
    it('should generate culturally neutral and inclusive confidence notes', async () => {
      const mockOutfit = {
        id: 'inclusivity-test',
        items: [{ id: 'item-9', category: 'traditional', colors: ['red', 'gold'] }],
        confidenceScore: 4.4,
      };

      const confidenceNote = await aynaMirrorService.generateConfidenceNote(
        mockOutfit as any,
        { userId: mockUserId } as any,
      );

      // Should avoid cultural assumptions
      const culturalAssumptions = ['western', 'american', 'european', 'exotic', 'ethnic'];
      const hasCulturalAssumptions = culturalAssumptions.some((term) =>
        confidenceNote.toLowerCase().includes(term),
      );
      expect(hasCulturalAssumptions).toBe(false);

      // Should be body-positive and inclusive
      const bodyPositiveWords = ['beautiful', 'confident', 'amazing', 'perfect', 'stunning'];
      const hasBodyPositivity = bodyPositiveWords.some((word) =>
        confidenceNote.toLowerCase().includes(word),
      );
      expect(hasBodyPositivity).toBe(true);

      // Should avoid size or body shape references
      const bodyShapeReferences = ['thin', 'skinny', 'fat', 'curvy', 'petite', 'tall'];
      const hasBodyShapeReferences = bodyShapeReferences.some((ref) =>
        confidenceNote.toLowerCase().includes(ref),
      );
      expect(hasBodyShapeReferences).toBe(false);
    });

    it('should work well for users with different style preferences', async () => {
      const stylePreferences = [
        { style: 'minimalist', colors: ['black', 'white', 'grey'] },
        { style: 'bohemian', colors: ['earth tones', 'jewel tones'] },
        { style: 'classic', colors: ['navy', 'beige', 'burgundy'] },
        { style: 'edgy', colors: ['black', 'leather', 'metal'] },
      ];

      for (const preference of stylePreferences) {
        const mockOutfit = {
          id: `style-${preference.style}`,
          items: [
            {
              id: 'item-style-test',
              category: 'outfit',
              tags: [preference.style],
              colors: preference.colors.slice(0, 2),
            },
          ],
          confidenceScore: 4.2,
        };

        const confidenceNote = await aynaMirrorService.generateConfidenceNote(
          mockOutfit as any,
          {
            userId: mockUserId,
            stylePreferences: { preferredStyles: [preference.style] },
          } as any,
        );

        expect(confidenceNote).toBeTruthy();

        // Should acknowledge the style preference
        const acknowledgesStyle =
          confidenceNote.toLowerCase().includes(preference.style) ||
          confidenceNote.toLowerCase().includes('style') ||
          confidenceNote.toLowerCase().includes('look');
        expect(acknowledgesStyle).toBe(true);
      }
    });
  });
});
